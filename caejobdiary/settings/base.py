"""
Django settings for cae_job_diary project.

Generated by 'django-admin startproject' using Django 2.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import json
import logging

# Normally nothing should be imported from django in the settings, but the
# ImproperlyConfigured is an exception because it explicitly directly points
# out configuration problems.
from django.core.exceptions import ImproperlyConfigured

TOP_LEVEL_DIR = os.path.dirname(os.path.dirname(os.path.dirname(
    os.path.abspath(__file__))))
print("TOP_LEVEL_DIR : {}".format(TOP_LEVEL_DIR))

# # # Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(
#     os.path.abspath(__file__))))
# print("BASE_DIR : {}".format(BASE_DIR))


# -----------------------------------------------------------------------------
# Secrets
# -----------------------------------------------------------------------------

# Defining possible locations where the config directory might reside.
CONFIG_DIRS = [
    os.path.realpath("/opt/caejd/config/"),
    os.path.join(TOP_LEVEL_DIR, "config")
]

secrets_filename = "secrets.json"
secrets_read = False
for config_dir in CONFIG_DIRS:
    secrets_filepath = os.path.join(config_dir, secrets_filename)
    print("Checking for secrects file at: {}".format(secrets_filepath))
    if os.path.exists(secrets_filepath):
        with open(secrets_filepath) as jsonfile:
            print("Loading secrets from: {}".format(secrets_filepath))
            secrets = json.load(jsonfile)
            secrets_read = True
if not secrets_read:
    raise FileNotFoundError(
        "No {} found in the possible locations: {}.".format(
            secrets_filename, ", ".join(CONFIG_DIRS))
        + " Please create such a file defining the required information."
        + " A dummy file can be created with the provided script"
        + " `bin/make_secrets.py`.")


def get_secret(setting, secrets=secrets):
    """Get the secret setting or raise explicit exception"""

    try:
        return secrets[setting]
    except KeyError:
        error_message="Set the {0} variable in the secrets file.".format(setting)
        raise ImproperlyConfigured(error_message)


SECRET_KEY = get_secret("SECRET_KEY")
FEEDBACK_RECIPIENT_EMAIL = get_secret("FEEDBACK_RECIPIENT_EMAIL")
OUTGOING_MAIL_HOST = (get_secret("OUTGOING_MAIL_HOST_SERVER"),
                      get_secret("OUTGOING_MAIL_HOST_PORT"))
OUTGOING_MAIL_CREDENTIALS = (get_secret("OUTGOING_MAIL_USER"),
                             get_secret("OUTGOING_MAIL_PASSWORD"))
WARNING_RECIPIENT_EMAIL = get_secret("WARNING_RECIPIENT_EMAIL")

# -----------------------------------------------------------------------------
# Django Settings
# -----------------------------------------------------------------------------

DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'diary.apps.DiaryConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'caejobdiary.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'caejobdiary.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASE_DIR = TOP_LEVEL_DIR

DATABASES = {
    'sqlite': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(DATABASE_DIR, 'db.sqlite3'),
    },
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'caejd',
        'USER': 'caejd',
        'PASSWORD': get_secret("DB_PASSWORD"),
        'HOST': '127.0.0.1',
        'PORT': '3306',
        'OPTIONS': {
            'sql_mode': 'STRICT_ALL_TABLES',
            'charset': 'utf8',
            'use_unicode': True
        },
        'CONN_MAX_AGE': 25200
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'


# -----------------------------------------------------------------------------
# Localization
# -----------------------------------------------------------------------------

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Berlin'

# Datetime format strings:
# https://docs.djangoproject.com/en/2.1/ref/templates/builtins/#date
DATE_FORMAT = "Y-m-d"
SHORT_DATE_FORMAT = DATE_FORMAT
DATETIME_FORMAT = "Y-m-d H:i:s"

USE_I18N = False

USE_L10N = False

USE_TZ = True


# -----------------------------------------------------------------------------
# Logging
# -----------------------------------------------------------------------------

LOG_DIR = os.path.join(TOP_LEVEL_DIR, "logs")
if not os.path.isdir(LOG_DIR):
    os.makedirs(LOG_DIR)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "default": {
            "format": "[{asctime} - {name} - {levelname}]:  {message}",
            "style": "{",
        },
        "test_control": {
            "format": "[     TEST CONTROL - {name} - {asctime} - {levelname}     ]:  {message}",
            "style": "{",
        },
        "test_subject": {
            "format": "[TEST SUBJECT - {name} - {levelname}]:  {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "default",
        },
        "error_mail": {
            "class": "logging.handlers.SMTPHandler",
            "formatter": "default",
            "mailhost": OUTGOING_MAIL_HOST,
            "credentials": OUTGOING_MAIL_CREDENTIALS,
            "secure": ((), ),
            "fromaddr": OUTGOING_MAIL_CREDENTIALS[0],
            "toaddrs": [WARNING_RECIPIENT_EMAIL],
            "subject": "CAEJobDiary Error!",
            "level": "ERROR"
        },
        "testing_control_console": {
            "class": "logging.StreamHandler",
            "formatter": "test_control",
        },
        "testing_subject_console": {
            "class": "logging.StreamHandler",
            "formatter": "test_subject",
        },
        "pollRotateHandler": {
            "class": "logging.handlers.RotatingFileHandler",
            "formatter": "default",
            "filename": os.path.join(LOG_DIR, "poll.log"),
            "maxBytes": 1000000,
            "backupCount": 5,
            "encoding": "utf8",
        },
        "pollWarnRotateHandler": {
            "class": "logging.handlers.RotatingFileHandler",
            "formatter": "default",
            "filename": os.path.join(LOG_DIR, "poll.warn"),
            "maxBytes": 1000000,
            "backupCount": 5,
            "encoding": "utf8",
            "level": "WARNING"
        },
        "updateRotateHandler": {
            "class": "logging.handlers.RotatingFileHandler",
            "formatter": "default",
            "filename": os.path.join(LOG_DIR, "update.log"),
            "maxBytes": 1000000,
            "backupCount": 5,
            "encoding": "utf8",
        },
        "diaryRotateHandler": {
            "class": "logging.handlers.RotatingFileHandler",
            "formatter": "default",
            "filename": os.path.join(LOG_DIR, "diary.log"),
            "maxBytes": 1000000,
            "backupCount": 5,
            "encoding": "utf8",
        },
        "djangoRotateHandler": {
            "class": "logging.handlers.RotatingFileHandler",
            "formatter": "default",
            "filename": os.path.join(LOG_DIR, "django.log"),
            "maxBytes": 1000000,
            "backupCount": 2,
            "encoding": "utf8",
        },
    },
    "loggers": {
        "root": {
            "handlers": ["console", "error_mail"],
            "level": "DEBUG",
        },
        "__main__": {
            "handlers": ["console", "error_mail"],
            "level": "DEBUG",
        },
        "testing_control": {
            "handlers": ["testing_control_console"],
            "level": "DEBUG",
        },
        "testing_subject": {
            "handlers": ["testing_subject_console"],
            "level": "DEBUG",
            "propagate": False
        },
        "django": {
            "handlers": ["djangoRotateHandler"],
            "level": "INFO",
        },
        "diary": {
            "handlers": ["diaryRotateHandler", "error_mail"],
            "level": "DEBUG",
        },
        "utils.jobinfo.poll": {
            "handlers": ["pollRotateHandler", "pollWarnRotateHandler",
                         "error_mail"],
            "level": "DEBUG",
        },
        "utils.jobinfo.update": {
            "handlers": ["updateRotateHandler", "error_mail"],
            "level": "DEBUG",
        },
    },
}


# -----------------------------------------------------------------------------
# CAEJobDiary Application settings
# -----------------------------------------------------------------------------

POLL_DIR = os.path.abspath(
    os.path.join(TOP_LEVEL_DIR, "data", "example_job_info_sources"))
POLL_TIMEOUT_SECONDS = 1
UPDATE_TIMEOUT_SECONDS = 5 * 60  # Every 5 minutes
